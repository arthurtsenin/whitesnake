import { CaseDataType } from "../types";

import cloud from "&/images/cases/aiChatbots/cloud.webp";
import createChatBots from "&/images/cases/aiChatbots/createChatBots.webp";
import python from "&/images/cases/aiChatbots/python.webp";

export const AI_CHATBOTS_DATA: CaseDataType = {
  hero: {
    title: "Платформа с чат-ботами на базе ИИ",
    subtitle:
      "Продвинутая система с визуальным конструктором чат-ботов на базе искусственного интеллекта, которая автоматизирует поддержку клиентов. Платформа использует надежные технологии и инструменты для обработки больших потоков данных в режиме реального времени и для анализа производительности ботов.",
    keywords: [
      "Разговорный ИИ",
      "Чат-боты",
      "Служба поддержки клиентов",
      "Python",
      "Обработка в режиме реального времени",
      "Машинное обучение",
    ],
  },
  customer_title: "Клиент",
  customer_stats: {
    направление: "Разговорная коммерция",
    страна: "США",
    "дата старта": "2021",
  },
  customer_info: [
    "Клиент является мировым лидером в области разговорного ИИ, благодаря чему клиенты крупных компаний могут получить новый опыт, взаимодействуя с искусственным интеллектом. Наш заказчик обслуживает тысячи клиентов, включая крупные бренды, и был признан одной из самых инновационных компаний в мире.",

    "Подробная информация о клиенте не может быть предоставлена вследствие подписания NDA.",
  ],

  challenge_title: "Задача",
  challenge_info: [
    "Заказчик хотел эффективное, экономичное решение для оказания поддержки своим клиентам, не задействуя человеческие ресурсы. Требовалась масштабируемая, адаптируемая система, которая могла бы обрабатывать большие потоки данных в режиме реального времени и анализировать производительность чат-ботов для обеспечения бесперебойной клиентской поддержки.",
  ],

  solution_title: "Решение",
  solution_info: {
    items: [
      {
        id: 1,
        text: [
          "Во-первых, мы создали конструктор визуального интерфейса для создания чат-ботов. Этот удобный интерфейс позволил клиентам разрабатывать и настраивать чат-боты в соответствии со своими конкретными требованиями без необходимости в обширных знаниях в области программирования.",

          "Кроме того, наша команда разработала внутреннюю часть системы оценки ботов, позволяющую клиентам оставлять отзывы о производительности чат-ботов на базе искусственного интеллекта. Эта рейтинговая система помогла оценить и повысить эффективность чат-ботов в обработке запросов клиентов, обеспечив лучший пользовательский опыт.",

          "Используя надежный технический стек, состоящий из Python, FastAPI, Aiohttp, Tensorflow, Pandas, PostgreSQL, Docker, Docker-Compose, Kubernetes, Redis, Kafka, GitHub, Seldon, Prometheus, мы создали мощное и масштабируемое решение.",
        ],
        image: createChatBots,
      },
      {
        id: 2,
        text: [
          "Python послужил основой нашей разработки и позволил нам создавать эффективные и надежные backend-функции. FastAPI и Aiohttp были использованы для создания высокопроизводительных RESTful API для бесшовной интеграции и взаимодействия с интерфейсом и другими сервисами. Эти фреймворки в сочетании с PostgreSQL обеспечили безопасное и эффективное хранение и извлечение данных рейтингов и конфигураций ботов.",

          "Для расширения возможностей чат-ботов мы использовали Tensorflow, что позволило разрабатывать и внедрять передовые модели машинного обучения. Мы использовали Pandas для эффективной обработки и анализа данных, благодаря чему мы смогли обеспечить точную информацию о взаимодействии с клиентами.",

          "Контейнеризация сыграла важную роль в нашем решении, поскольку Docker и Docker-Compose обеспечивают легкий процесс локальной разработки. Используя Kubernetes мы создали масштабируемую и устойчивую платформу для управления этими контейнерами.",
        ],
        image: python,
      },
      {
        id: 2,
        text: [
          "Для передачи и обработки данных в режиме реального времени мы применяли Redis и Kafka. Redis использовался как быстрое и надежное хранилище данных в памяти, а с помощью Kafka стала возможной плавная передача данных между различными компонентами системы.",

          "GitHub упростил контроль версий и процесс разработки и обеспечил эффективную совместную работу и управление кодом. Seldon позволил ввести плавную интеграцию моделей машинного обучения в систему.",

          "Для контроля и отслеживания производительности системы мы внедрили Prometheus, что обеспечило непрерывный мониторинг работоспособности системы.",
        ],
        image: cloud,
      },
    ],
  },

  results_title: "Результаты",
  results_info: {
    summary:
      "Сотрудничая с Pynest, заказчик успешно внедрил мощную платформу чат-ботов на базе искусственного интеллекта, которая произвела революцию в их подходе к клиентской поддержке. Это привело к значительному сокращению времени ожидания ответа, повышению удовлетворенности клиентов и увеличению экономической эффективности. Встроенные в платформы возможности анализа производительности и мониторинга позволили постоянно совершенствовать и оптимизировать чат-ботов, обеспечивая неизменно высокий уровень клиентской поддержки.",
  },
  results_cubes: [
    {
      title: "20x",
      subtitle: "рост числа клиентов",
    },
    {
      title: "18%",
      subtitle: "повышение производительности",
    },
  ],

  team_title: "Команда",
  team_info: [
    { id: 1, teamName: "Backend-разработчиков", teamCount: 6 },
    { id: 2, teamName: "Fullstack-разработчика", teamCount: 2 },
    { id: 4, teamName: "Dev-ops", teamCount: 1 },
    { id: 3, teamName: "Техлид", teamCount: 1 },
  ],

  stack_title: "Технологии",

  stack_info: {
    backend: [
      "Pyton",
      "FastAPI",
      "Aiohttp",
      "Pydantic",
      "SQLAlchemy",
      "Seldon",
      "Prometheus",
      "Kafka",
    ],
    ["Dev-ops"]: ["Docker", "Docker-compose", "Kubernetes"],
    платформы: ["AWS"],
  },
};
